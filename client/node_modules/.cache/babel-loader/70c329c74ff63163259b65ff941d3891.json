{"ast":null,"code":"import { BookingConstants } from '../_constants';\nexport const booking = {\n  loadDashboard,\n  bookRoom,\n  checkAvailable\n};\nconst BASE_URL = \"http://localhost:8000/api/\";\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if ([401, 403, 500].indexOf(response.status) !== -1) {} //   return Promise.reject(error);\n\n    }\n\n    return data;\n  });\n}\n\nconst getBookingListSuccess = lists => ({\n  type: BookingConstants.BOOKING_LIST_SUCCESS,\n  payload: lists\n});\n\nconst bookSuccess = (isAvailable, buttonText) => ({\n  type: BookingConstants.BOOKING_SUBMIT_SUCCESS,\n  payload: {\n    isAvailable,\n    buttonText\n  }\n});\n\nconst checkAvailableSuccess = (isAvailable, buttonText) => ({\n  type: BookingConstants.AVAILABLE_SUCCESS,\n  payload: {\n    isAvailable,\n    buttonText\n  }\n});\n\nconst checkAvailableLodaing = buttonText => ({\n  type: BookingConstants.AVAILABLE_LOADING,\n  payload: {\n    buttonText\n  }\n});\n\nfunction loadDashboard() {\n  return dispatch => {\n    fetch(BASE_URL + \"booking/list\").then(response => response.json()).then(data => {\n      dispatch(getBookingListSuccess(data.payload));\n    });\n  };\n}\n\nfunction bookRoom(params) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      first_name: params.firstname,\n      last_name: params.lastname,\n      email: params.email,\n      reservation_date: params.reservation_date\n    })\n  };\n  return dispatch => {\n    fetch(BASE_URL + \"book/room\", requestOptions).then(response => {\n      return response.text().then(text => {\n        const data = text && JSON.parse(text);\n\n        if (!response.ok) {\n          const error = data && data.message || response.statusText;\n          return Promise.reject(error);\n        }\n\n        let isAvailable = data.payload === 'free';\n        let buttonText = isAvailable ? \"Book Now\" : \"Check Available\";\n        dispatch(bookSuccess(false, \"Check Available\"));\n      });\n    });\n  };\n}\n\nfunction checkAvailable(params) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      reservation_date: params.reservation_date\n    })\n  };\n  return dispatch => {\n    dispatch(checkAvailableLodaing(\"Checking...\"));\n    fetch(BASE_URL + \"check/room-available\", requestOptions).then(response => {\n      return response.text().then(text => {\n        const data = text && JSON.parse(text);\n\n        if (!response.ok) {\n          const error = data && data.message || response.statusText;\n          return Promise.reject(error);\n        }\n\n        let isAvailable = data.payload === 'free';\n        let buttonText = isAvailable ? \"Book Now\" : \"Check Available\";\n        dispatch(checkAvailableSuccess(isAvailable, buttonText));\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/home/atiqul/docker-project/room-booking-app/client/src/_actions/booking.actions.js"],"names":["BookingConstants","booking","loadDashboard","bookRoom","checkAvailable","BASE_URL","handleResponse","response","text","then","data","JSON","parse","ok","indexOf","status","getBookingListSuccess","lists","type","BOOKING_LIST_SUCCESS","payload","bookSuccess","isAvailable","buttonText","BOOKING_SUBMIT_SUCCESS","checkAvailableSuccess","AVAILABLE_SUCCESS","checkAvailableLodaing","AVAILABLE_LOADING","dispatch","fetch","json","params","requestOptions","method","headers","Accept","body","stringify","first_name","firstname","last_name","lastname","email","reservation_date","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { BookingConstants } from '../_constants';\n\nexport const booking = {\n    loadDashboard,\n    bookRoom,\n    checkAvailable\n};\n\nconst BASE_URL = \"http://localhost:8000/api/\";\n\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n\n\n        if (!response.ok) {\n\n            if ([401, 403, 500].indexOf(response.status) !== -1) {\n\n            }\n\n         //   return Promise.reject(error);\n        }\n\n        return data;\n    });\n}\n\n\nconst getBookingListSuccess = lists => ({\n    type: BookingConstants.BOOKING_LIST_SUCCESS,\n    payload: lists,\n});\n\n\nconst bookSuccess = (isAvailable, buttonText) => ({\n    type: BookingConstants.BOOKING_SUBMIT_SUCCESS,\n    payload: {isAvailable, buttonText},\n});\nconst checkAvailableSuccess = (isAvailable, buttonText) => ({\n    type: BookingConstants.AVAILABLE_SUCCESS,\n    payload: {isAvailable, buttonText},\n});\n\n\nconst checkAvailableLodaing = (buttonText) => ({\n    type: BookingConstants.AVAILABLE_LOADING,\n    payload: {buttonText},\n});\n\nfunction loadDashboard() {\n    return dispatch => {\n        fetch(BASE_URL + \"booking/list\")\n            .then(response => response.json())\n            .then(data => {\n                dispatch(getBookingListSuccess(data.payload));\n            });\n    };\n}\n\nfunction bookRoom(params) {\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            Accept: 'application/json'\n        },\n        body: JSON.stringify({\n            first_name: params.firstname,\n            last_name: params.lastname,\n            email: params.email,\n            reservation_date: params.reservation_date,\n        })\n    };\n\n\n    return dispatch => {\n        fetch(BASE_URL + \"book/room\", requestOptions)\n            .then(response => {\n                return response.text().then(text => {\n                    const data = text && JSON.parse(text);\n\n                    if (!response.ok) {\n                        const error = (data && data.message) || response.statusText;\n                        return Promise.reject(error);\n                    }\n\n                    let isAvailable = (data.payload === 'free');\n\n                    let buttonText = (isAvailable) ? \"Book Now\" : \"Check Available\";\n\n                    dispatch(bookSuccess(false, \"Check Available\"));\n                });\n            });\n    };\n}\n\nfunction checkAvailable(params) {\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            Accept: 'application/json'\n        },\n        body: JSON.stringify({\n            reservation_date: params.reservation_date,\n        })\n    };\n\n\n\n    return dispatch => {\n\n        dispatch(checkAvailableLodaing(\"Checking...\"));\n\n        fetch(BASE_URL + \"check/room-available\", requestOptions)\n            .then(response => {\n                return response.text().then(text => {\n                    const data = text && JSON.parse(text);\n\n                    if (!response.ok) {\n                        const error = (data && data.message) || response.statusText;\n                        return Promise.reject(error);\n                    }\n\n                    let isAvailable = (data.payload === 'free');\n\n                    let buttonText = (isAvailable) ? \"Book Now\" : \"Check Available\";\n\n                    dispatch(checkAvailableSuccess(isAvailable, buttonText));\n                });\n            });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}