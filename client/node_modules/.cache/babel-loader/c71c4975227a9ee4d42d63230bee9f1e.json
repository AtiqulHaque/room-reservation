{"ast":null,"code":"import { sendersConstants, userConstants } from '../_constants';\nimport { senderService } from \"../_services\";\nexport const allSenders = {\n  loadAllSenders,\n  loadMoreSenders,\n  searchSenders\n};\n\nconst getAllSenders = (senders, page) => ({\n  type: sendersConstants.GET_ALL_SENDERS,\n  payload: senders.payload,\n  page: page,\n  search: \"\"\n});\n\nconst searchInSenders = (senders, page, search) => ({\n  type: sendersConstants.SEARCH_IN_SENDERS,\n  payload: senders.payload,\n  page: page,\n  search: search\n});\n\nconst searchLoading = (senders, page, search) => ({\n  type: sendersConstants.SEARCH_IN_SENDERS,\n  payload: senders.payload,\n  page: page,\n  search: search\n});\n\nfunction loadAllSenders(page) {\n  return dispatch => {\n    dispatch(searchRequest());\n    senderService.loadAllSenders(page).then(data => {\n      dispatch(searchSuccess());\n      dispatch(getAllSenders(data, page));\n    });\n  };\n}\n\nfunction loadMoreSenders(nextPage) {\n  return dispatch => {\n    senderService.loadAllSenders(nextPage).then(data => {\n      dispatch(getAllSenders(data, nextPage));\n    });\n  };\n}\n\nfunction searchSenders(keyword, page) {\n  return dispatch => {\n    // loading true\n    dispatch(searchRequest());\n    senderService.searchSenders(keyword, page).then(data => {\n      dispatch(searchSuccess());\n      dispatch(searchInSenders(data, page, keyword));\n    });\n  };\n}\n\nfunction searchRequest() {\n  return {\n    type: sendersConstants.SEARCH_SENDER_REQUEST\n  };\n}\n\nfunction searchSuccess() {\n  return {\n    type: sendersConstants.SEARCH_SENDER_SUCCESS\n  };\n}","map":{"version":3,"sources":["/home/atiqul/docker-project/room-booking-app/client/src/_actions/senders.action.js"],"names":["sendersConstants","userConstants","senderService","allSenders","loadAllSenders","loadMoreSenders","searchSenders","getAllSenders","senders","page","type","GET_ALL_SENDERS","payload","search","searchInSenders","SEARCH_IN_SENDERS","searchLoading","dispatch","searchRequest","then","data","searchSuccess","nextPage","keyword","SEARCH_SENDER_REQUEST","SEARCH_SENDER_SUCCESS"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,aAA1B,QAA8C,eAA9C;AACA,SAAQC,aAAR,QAA4B,cAA5B;AAEA,OAAO,MAAMC,UAAU,GAAG;AACtBC,EAAAA,cADsB;AAEtBC,EAAAA,eAFsB;AAGtBC,EAAAA;AAHsB,CAAnB;;AAMP,MAAMC,aAAa,GAAG,CAACC,OAAD,EAASC,IAAT,MAAmB;AACrCC,EAAAA,IAAI,EAAEV,gBAAgB,CAACW,eADc;AAErCC,EAAAA,OAAO,EAAEJ,OAAO,CAACI,OAFoB;AAGrCH,EAAAA,IAAI,EAAEA,IAH+B;AAIrCI,EAAAA,MAAM,EAAC;AAJ8B,CAAnB,CAAtB;;AAOA,MAAMC,eAAe,GAAG,CAACN,OAAD,EAASC,IAAT,EAAcI,MAAd,MAA0B;AAC9CH,EAAAA,IAAI,EAAEV,gBAAgB,CAACe,iBADuB;AAE9CH,EAAAA,OAAO,EAAEJ,OAAO,CAACI,OAF6B;AAG9CH,EAAAA,IAAI,EAAEA,IAHwC;AAI9CI,EAAAA,MAAM,EAACA;AAJuC,CAA1B,CAAxB;;AAOA,MAAMG,aAAa,GAAG,CAACR,OAAD,EAASC,IAAT,EAAcI,MAAd,MAA0B;AAC5CH,EAAAA,IAAI,EAAEV,gBAAgB,CAACe,iBADqB;AAE5CH,EAAAA,OAAO,EAAEJ,OAAO,CAACI,OAF2B;AAG5CH,EAAAA,IAAI,EAAEA,IAHsC;AAI5CI,EAAAA,MAAM,EAACA;AAJqC,CAA1B,CAAtB;;AAOA,SAAST,cAAT,CAAwBK,IAAxB,EAA6B;AACzB,SAAOQ,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,aAAa,EAAd,CAAR;AACAhB,IAAAA,aAAa,CAACE,cAAd,CAA6BK,IAA7B,EACKU,IADL,CACUC,IAAI,IAAI;AACVH,MAAAA,QAAQ,CAACI,aAAa,EAAd,CAAR;AACAJ,MAAAA,QAAQ,CAACV,aAAa,CAACa,IAAD,EAAMX,IAAN,CAAd,CAAR;AACH,KAJL;AAKH,GAPD;AAQH;;AACD,SAASJ,eAAT,CAAyBiB,QAAzB,EAAkC;AAC9B,SAAOL,QAAQ,IAAI;AACff,IAAAA,aAAa,CAACE,cAAd,CAA6BkB,QAA7B,EACKH,IADL,CACUC,IAAI,IAAI;AACVH,MAAAA,QAAQ,CAACV,aAAa,CAACa,IAAD,EAAME,QAAN,CAAd,CAAR;AACH,KAHL;AAIH,GALD;AAMH;;AAED,SAAShB,aAAT,CAAuBiB,OAAvB,EAA+Bd,IAA/B,EAAoC;AAChC,SAAOQ,QAAQ,IAAI;AACf;AACAA,IAAAA,QAAQ,CAACC,aAAa,EAAd,CAAR;AACAhB,IAAAA,aAAa,CAACI,aAAd,CAA4BiB,OAA5B,EAAoCd,IAApC,EACKU,IADL,CACUC,IAAI,IAAI;AACVH,MAAAA,QAAQ,CAACI,aAAa,EAAd,CAAR;AACAJ,MAAAA,QAAQ,CAACH,eAAe,CAACM,IAAD,EAAMX,IAAN,EAAWc,OAAX,CAAhB,CAAR;AACH,KAJL;AAKH,GARD;AASH;;AACD,SAASL,aAAT,GAAyB;AAAE,SAAO;AAAER,IAAAA,IAAI,EAAEV,gBAAgB,CAACwB;AAAzB,GAAP;AAA0D;;AACrF,SAASH,aAAT,GAAyB;AAAE,SAAO;AAAEX,IAAAA,IAAI,EAAEV,gBAAgB,CAACyB;AAAzB,GAAP;AAA0D","sourcesContent":["import {sendersConstants, userConstants} from '../_constants';\nimport {senderService} from \"../_services\";\n\nexport const allSenders = {\n    loadAllSenders,\n    loadMoreSenders,\n    searchSenders,\n};\n\nconst getAllSenders = (senders,page) => ({\n    type: sendersConstants.GET_ALL_SENDERS,\n    payload: senders.payload,\n    page: page,\n    search:\"\",\n});\n\nconst searchInSenders = (senders,page,search) => ({\n    type: sendersConstants.SEARCH_IN_SENDERS,\n    payload: senders.payload,\n    page: page,\n    search:search,\n});\n\nconst searchLoading = (senders,page,search) => ({\n    type: sendersConstants.SEARCH_IN_SENDERS,\n    payload: senders.payload,\n    page: page,\n    search:search,\n});\n\nfunction loadAllSenders(page){\n    return dispatch => {\n        dispatch(searchRequest());\n        senderService.loadAllSenders(page)\n            .then(data => {\n                dispatch(searchSuccess());\n                dispatch(getAllSenders(data,page));\n            });\n    };\n}\nfunction loadMoreSenders(nextPage){\n    return dispatch => {\n        senderService.loadAllSenders(nextPage)\n            .then(data => {\n                dispatch(getAllSenders(data,nextPage));\n            });\n    };\n}\n\nfunction searchSenders(keyword,page){\n    return dispatch => {\n        // loading true\n        dispatch(searchRequest());\n        senderService.searchSenders(keyword,page)\n            .then(data => {\n                dispatch(searchSuccess());\n                dispatch(searchInSenders(data,page,keyword));\n            });\n    };\n}\nfunction searchRequest() { return { type: sendersConstants.SEARCH_SENDER_REQUEST }; }\nfunction searchSuccess() { return { type: sendersConstants.SEARCH_SENDER_SUCCESS }; }\n"]},"metadata":{},"sourceType":"module"}