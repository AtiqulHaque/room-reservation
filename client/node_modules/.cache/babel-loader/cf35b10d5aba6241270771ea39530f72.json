{"ast":null,"code":"import { sendersConstants, userConstants } from '../_constants';\nimport { contactService, senderService } from '../_services';\nexport const contactActions = {\n  getAll,\n  addContact,\n  searchContact\n};\n\nfunction addContact(contact_id, user_type, callBack) {\n  return dispatch => {\n    dispatch(request());\n    contactService.addContact(contact_id, user_type).then(data => {\n      dispatch(success(data));\n      callBack();\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.CONTACT_ADD_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.CONTACT_ADD_SUCCESS,\n      users\n    };\n  }\n}\n\nfunction getAll(page) {\n  return dispatch => {\n    dispatch(request());\n    contactService.getAll(page).then(users => dispatch(success(users)), error => {\n      dispatch(failure(error)); //  dispatch(alertActions.error(error));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.GETALL_SUCCESS,\n      users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETALL_FAILURE,\n      error\n    };\n  }\n}\n\nfunction searchContact(keyword, page) {\n  return dispatch => {\n    // loading true\n    dispatch(request());\n    contactService.searchContact(keyword, page).then(data => {\n      dispatch(success({\n        data,\n        keyword\n      })); // dispatch(searchInContacts(data,page,keyword));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(params) {\n    return {\n      type: userConstants.GET_SEARCH_SUCCESS,\n      params\n    };\n  }\n}\n\nconst searchInContacts = (data, page, keyword) => ({\n  type: userConstants.SEARCH_IN_CONTACTS,\n  data\n});","map":{"version":3,"sources":["/home/atiqul/docker-project/room-booking-app/client/src/_actions/contact.actions.js"],"names":["sendersConstants","userConstants","contactService","senderService","contactActions","getAll","addContact","searchContact","contact_id","user_type","callBack","dispatch","request","then","data","success","type","CONTACT_ADD_REQUEST","users","CONTACT_ADD_SUCCESS","page","error","failure","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","keyword","params","GET_SEARCH_SUCCESS","searchInContacts","SEARCH_IN_CONTACTS"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,aAA1B,QAA8C,eAA9C;AACA,SAAQC,cAAR,EAAwBC,aAAxB,QAA4C,cAA5C;AAGA,OAAO,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,MAD0B;AAE1BC,EAAAA,UAF0B;AAG1BC,EAAAA;AAH0B,CAAvB;;AAQP,SAASD,UAAT,CAAoBE,UAApB,EAAgCC,SAAhC,EAA2CC,QAA3C,EAAoD;AAChD,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AACAV,IAAAA,cAAc,CAACI,UAAf,CAA0BE,UAA1B,EAAsCC,SAAtC,EACKI,IADL,CACUC,IAAI,IAAI;AACVH,MAAAA,QAAQ,CAACI,OAAO,CAACD,IAAD,CAAR,CAAR;AACAJ,MAAAA,QAAQ;AACX,KAJL;AAKH,GAPD;;AASA,WAASE,OAAT,GAAmB;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAEf,aAAa,CAACgB;AAAtB,KAAP;AAAqD;;AAC1E,WAASF,OAAT,CAAiBG,KAAjB,EAAwB;AAAE,WAAO;AAAEF,MAAAA,IAAI,EAAEf,aAAa,CAACkB,mBAAtB;AAA2CD,MAAAA;AAA3C,KAAP;AAA4D;AACzF;;AAID,SAASb,MAAT,CAAgBe,IAAhB,EAAsB;AAClB,SAAOT,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AACAV,IAAAA,cAAc,CAACG,MAAf,CAAsBe,IAAtB,EACKP,IADL,CAEQK,KAAK,IAAIP,QAAQ,CAACI,OAAO,CAACG,KAAD,CAAR,CAFzB,EAGQG,KAAK,IAAI;AACLV,MAAAA,QAAQ,CAACW,OAAO,CAACD,KAAD,CAAR,CAAR,CADK,CAEP;AACD,KANT;AAQH,GAVD;;AAYA,WAAST,OAAT,GAAmB;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAEf,aAAa,CAACsB;AAAtB,KAAP;AAAgD;;AACrE,WAASR,OAAT,CAAiBG,KAAjB,EAAwB;AAAE,WAAO;AAAEF,MAAAA,IAAI,EAAEf,aAAa,CAACuB,cAAtB;AAAsCN,MAAAA;AAAtC,KAAP;AAAuD;;AACjF,WAASI,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEL,MAAAA,IAAI,EAAEf,aAAa,CAACwB,cAAtB;AAAsCJ,MAAAA;AAAtC,KAAP;AAAuD;AACpF;;AAGD,SAASd,aAAT,CAAuBmB,OAAvB,EAA+BN,IAA/B,EAAoC;AAChC,SAAOT,QAAQ,IAAI;AACf;AACAA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AACAV,IAAAA,cAAc,CAACK,aAAf,CAA6BmB,OAA7B,EAAqCN,IAArC,EACKP,IADL,CACUC,IAAI,IAAI;AACVH,MAAAA,QAAQ,CAACI,OAAO,CAAC;AACbD,QAAAA,IADa;AACPY,QAAAA;AADO,OAAD,CAAR,CAAR,CADU,CAIX;AACF,KANL;AAOH,GAVD;;AAWA,WAASd,OAAT,GAAmB;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAEf,aAAa,CAACsB;AAAtB,KAAP;AAAgD;;AAErE,WAASR,OAAT,CAAiBY,MAAjB,EAAyB;AACrB,WAAO;AAAEX,MAAAA,IAAI,EAAEf,aAAa,CAAC2B,kBAAtB;AAA0CD,MAAAA;AAA1C,KAAP;AACH;AACJ;;AAED,MAAME,gBAAgB,GAAG,CAACf,IAAD,EAAMM,IAAN,EAAWM,OAAX,MAAuB;AAC5CV,EAAAA,IAAI,EAAEf,aAAa,CAAC6B,kBADwB;AACJhB,EAAAA;AADI,CAAvB,CAAzB","sourcesContent":["import {sendersConstants, userConstants} from '../_constants';\nimport {contactService, senderService} from '../_services';\n\n\nexport const contactActions = {\n    getAll,\n    addContact,\n    searchContact\n};\n\n\n\nfunction addContact(contact_id, user_type, callBack){\n    return dispatch => {\n        dispatch(request());\n        contactService.addContact(contact_id, user_type)\n            .then(data => {\n                dispatch(success(data));\n                callBack();\n            });\n    };\n\n    function request() { return { type: userConstants.CONTACT_ADD_REQUEST }; }\n    function success(users) { return { type: userConstants.CONTACT_ADD_SUCCESS, users }; }\n}\n\n\n\nfunction getAll(page) {\n    return dispatch => {\n        dispatch(request());\n        contactService.getAll(page)\n            .then(\n                users => dispatch(success(users)),\n                error => {\n                    dispatch(failure(error));\n                  //  dispatch(alertActions.error(error));\n                }\n            );\n    };\n\n    function request() { return { type: userConstants.GETALL_REQUEST }; }\n    function success(users) { return { type: userConstants.GETALL_SUCCESS, users }; }\n    function failure(error) { return { type: userConstants.GETALL_FAILURE, error }; }\n}\n\n\nfunction searchContact(keyword,page){\n    return dispatch => {\n        // loading true\n        dispatch(request());\n        contactService.searchContact(keyword,page)\n            .then(data => {\n                dispatch(success({\n                    data, keyword\n                }));\n               // dispatch(searchInContacts(data,page,keyword));\n            });\n    };\n    function request() { return { type: userConstants.GETALL_REQUEST }; }\n\n    function success(params) {\n        return { type: userConstants.GET_SEARCH_SUCCESS, params };\n    }\n}\n\nconst searchInContacts = (data,page,keyword) =>({\n    type: userConstants.SEARCH_IN_CONTACTS ,data\n});"]},"metadata":{},"sourceType":"module"}