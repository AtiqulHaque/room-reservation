{"ast":null,"code":"var _jsxFileName = \"/home/atiqul/docker-project/room-booking-app/client/src/components/App.js\";\nimport React, { useReducer } from 'react';\nimport { connect } from 'react-redux';\nimport 'react-notifications/lib/notifications.css';\nimport { Button, Card, Container, Row, Col } from \"react-bootstrap\";\nimport { report, dateRangeActions } from \"../_actions\";\nimport \"../styles.css\";\nimport { DateRangeInput } from \"@datepicker-react/styled\";\nimport { ThemeProvider } from \"styled-components\";\nimport { daterange } from \"../_reducers/daterange.reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  zIndex: \"10000000\"\n};\nconst initialState = {\n  startDate: null,\n  endDate: null,\n  focusedInput: null\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'focusChange':\n      return { ...state,\n        focusedInput: action.payload\n      };\n\n    case 'dateChange':\n      return action.payload;\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadDashBoard: article => dispatch(report.loadDashboard(article)),\n    dateChangeFun: data => dispatch(dateRangeActions.dateChange(data)),\n    focusChangeFun: focusInput => dispatch(dateRangeActions.focusChange(focusInput))\n  };\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange() {//this.props.loadDashBoard();\n    // console.log(\"aaaa\");\n  }\n\n  componentDidMount() {//this.props.loadDashBoard();\n  }\n\n  render() {\n    let cards = this.props.reservations.map((val, key) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: '18rem'\n          },\n          className: \"col-md-2 m-2\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: [\"hi \", val.reservation_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: val.reservation_date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n              theme: {\n                breakpoints: ['32em', '48em', '64em'],\n                reactDatepicker: {\n                  datepickerZIndex: 100000\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(DateRangeInput, {\n                onDatesChange: data => alert(\"hi\"),\n                onFocusChange: focusedInput => this.props.focusChangeFun(focusedInput),\n                startDate: this.props.startDate // Date or null\n                ,\n                endDate: this.props.endDate // Date or null\n                ,\n                focusedInput: this.props.focusedInput // START_DATE, END_DATE or null\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: this.openModal,\n                variant: \"primary\",\n                size: \"lg\",\n                active: true,\n                children: [\"+\", \" Book Room\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 33\n              }, this)\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: cards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const {\n    loading\n  } = state.report;\n  const {\n    startDate\n  } = state.daterange;\n  const {\n    endDate\n  } = state.daterange;\n  const {\n    focusedInput\n  } = state.daterange;\n  const {\n    reservations\n  } = state.report;\n  return {\n    loading,\n    reservations,\n    startDate,\n    endDate,\n    focusedInput\n  };\n}\n\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport { connectedApp as App };","map":{"version":3,"sources":["/home/atiqul/docker-project/room-booking-app/client/src/components/App.js"],"names":["React","useReducer","connect","Button","Card","Container","Row","Col","report","dateRangeActions","DateRangeInput","ThemeProvider","daterange","style","zIndex","initialState","startDate","endDate","focusedInput","reducer","state","action","type","payload","Error","mapDispatchToProps","dispatch","loadDashBoard","article","loadDashboard","dateChangeFun","data","dateChange","focusChangeFun","focusInput","focusChange","App","Component","constructor","props","handleChange","bind","componentDidMount","render","cards","reservations","map","val","key","width","reservation_date","breakpoints","reactDatepicker","datepickerZIndex","alert","openModal","mapStateToProps","loading","connectedApp"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\nimport {connect} from 'react-redux';\nimport 'react-notifications/lib/notifications.css';\nimport {Button, Card, Container, Row,Col} from \"react-bootstrap\";\nimport {report,dateRangeActions } from \"../_actions\";\nimport \"../styles.css\";\nimport {DateRangeInput} from \"@datepicker-react/styled\";\nimport { ThemeProvider } from \"styled-components\";\nimport {daterange} from \"../_reducers/daterange.reducer\";\n\n\nconst style = {\n    zIndex: \"10000000\",\n\n};\n\n\nconst initialState = {\n    startDate: null,\n    endDate: null,\n    focusedInput: null,\n}\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'focusChange':\n            return {...state, focusedInput: action.payload}\n        case 'dateChange':\n            return action.payload\n        default:\n            throw new Error()\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadDashBoard: article => dispatch(report.loadDashboard(article)),\n        dateChangeFun: data => dispatch(dateRangeActions.dateChange(data)),\n        focusChangeFun: focusInput => dispatch(dateRangeActions.focusChange(focusInput))\n    };\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange() {\n        //this.props.loadDashBoard();\n       // console.log(\"aaaa\");\n    }\n\n    componentDidMount() {\n        //this.props.loadDashBoard();\n    }\n\n    render() {\n\n        let cards = this.props.reservations.map((val, key) => {\n            return (\n                <React.Fragment>\n                    <Card style={{ width: '18rem' }} className='col-md-2 m-2'>\n                        <Card.Body>\n                            <Card.Title>hi {val.reservation_date}</Card.Title>\n                            <Card.Text>\n                                {val.reservation_date}\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </React.Fragment>\n            )\n        });\n\n\n        return (\n            <div className='App'>\n\n                <Container>\n                    <Row>\n                        <Col>\n                            <ThemeProvider\n                                theme={{\n                                    breakpoints: ['32em', '48em', '64em'],\n                                    reactDatepicker: {\n                                        datepickerZIndex : 100000\n                                    },\n                                }}\n                            >\n                                <DateRangeInput\n                                    onDatesChange={data => alert(\"hi\")}\n                                    onFocusChange={focusedInput => this.props.focusChangeFun(focusedInput)}\n                                    startDate={this.props.startDate} // Date or null\n                                    endDate={this.props.endDate} // Date or null\n                                    focusedInput={this.props.focusedInput} // START_DATE, END_DATE or null\n                                />\n\n                            </ThemeProvider>\n                        </Col>\n\n                        <Col>\n                            <>\n                                <Button onClick={this.openModal} variant=\"primary\" size=\"lg\" active>\n                                    {\"+\"} Book Room\n                                </Button>\n                            </>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        {cards}\n                    </Row>\n                </Container>\n            </div>\n\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    const {loading} = state.report;\n    const {startDate} = state.daterange;\n    const {endDate} = state.daterange;\n    const {focusedInput} = state.daterange;\n    const {reservations} = state.report;\n    return {\n        loading,\n        reservations,\n        startDate,\n        endDate,\n        focusedInput\n    };\n}\n\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport {connectedApp as App};\n"]},"metadata":{},"sourceType":"module"}